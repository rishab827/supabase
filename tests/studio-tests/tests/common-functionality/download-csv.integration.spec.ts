import { test, expect } from '@playwright/test';
import fs from 'fs/promises';

test('CSV Export: verify escaped quotes', async ({ page }) => {
  // Navigate to the SQL page.
  await page.goto('http://localhost:8082/project/default/sql/1');

  // --- Interact with the custom SQL editor ---
  // These selectors are generated by Playwright Codegen.
  // They may need adjustments depending on your actual query/editor structure.
  await page.locator('section')
    .getByRole('code')
    .locator('div')
    .filter({ hasText: '(select version()) as version,' })
    .nth(4)
    .click();
  await page.locator('section')
    .getByRole('code')
    .locator('div')
    .filter({ hasText: '(select current_setting(\'' })
    .nth(4)
    .click();
  await page.locator('section')
    .getByRole('code')
    .locator('div')
    .filter({ hasText: '(select current_setting(\'' })
    .nth(4)
    .click();
  await page.locator('section')
    .getByRole('code')
    .locator('div')
    .filter({ hasText: '(select current_setting(\'' })
    .nth(4)
    .click();

  // Use arrow keys to ensure the editor has focus.
  // (Generated by codegen as repeated arrow presses)
  for (let i = 0; i < 8; i++) {
    await page.getByLabel('Editor content;Press Alt+F1').press('ArrowRight');
  }


  await page.getByLabel('Editor content;Press Alt+F1').press('Meta+A'); // or 'Control+A' for Windows/Linux
  await page.keyboard.press('Backspace');
  await page.keyboard.type('SELECT \'He said "Hello"\' AS greeting;');

  // --- Run the Query ---
  await page.getByRole('button', { name: 'Run', exact: true }).click();

  // Optionally, wait for query results to appear.
  // For example, you could wait for a specific result text:
  // await expect(page.locator('text=He said "Hello"')).toBeVisible({ timeout: 10000 });

  // --- Export and Download CSV ---
  await page.getByRole('button', { name: 'Export' }).click();
  
  // Wait for the download event when clicking "Download CSV".
  const [download] = await Promise.all([
    page.waitForEvent('download'),
    page.getByText('Download CSV').click()
  ]);

  // --- Verify CSV Content ---
  // Read the CSV file content.
  const filePath = await download.path();
  const csvContent = await fs.readFile(filePath!, 'utf8');

  // Validate that the CSV contains properly escaped quotes.
  // For example, a field that should display as: He said "Hello" in the CSV becomes: He said ""Hello""
  expect(csvContent).toContain('He said ""Hello""');
});
